name: Appium Tests

on:
  push:
    branches: [ master, main ]
  pull_request:
    branches: [ master, main ]
  workflow_dispatch:  # Allows manual triggering

jobs:
  test:
    runs-on: ubuntu-latest
    container:
      image: budtmo/docker-android:emulator_11.0
      options: --privileged --shm-size 8G

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Java for Maven
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '11'
          cache: 'maven'

      - name: Check environment
        run: |
          java -version
          echo "ANDROID_HOME=$ANDROID_HOME"
          ls -la $ANDROID_HOME || echo "ANDROID_HOME not found"
          adb devices || echo "adb not available"

      - name: Install and configure Appium
        run: |
          npm install -g appium@2.0.0
          appium driver install uiautomator2@2.12.1
          appium --log appium.log &
          echo "Waiting for Appium to start..."
          sleep 10

      - name: Copy APK if exists
        run: |
          mkdir -p src/test/resources/apps
          find . -name "*.apk" -exec cp {} src/test/resources/apps/ \; || echo "No APK files found"

      - name: Setup configuration
        run: |
          mkdir -p src/test/resources/config
          cp src/test/resources/config/github-actions-config.properties src/test/resources/config/config.properties || echo "Failed to copy config file"

      - name: Update GitHub Actions config
        run: |
          cat > src/test/resources/config/config.properties << EOF
          # Appium Server Configuration
          appium.server.url=http://127.0.0.1:4723
          
          # Platform Settings
          platform.name=Android
          device.name=emulator-5554
          automation.name=UiAutomator2
          no.reset=false
          autoGrantPermissions=true
          
          # App Settings
          app.package=com.tui.qa.challenge
          app.activity=com.tui.qa.challenge.MainActivity
          
          # Timeouts and Waits
          default.wait.seconds=5
          short.wait.seconds=2
          implicit.wait.ms=1000
          
          # Performance Settings
          ignore.unimportant.views=true
          disable.window.animation=true
          
          # Additional capabilities
          newCommandTimeout=300
          adbExecTimeout=60000
          EOF

      - name: Check device connection & install app
        run: |
          # Wait for the emulator to be fully started in container
          echo "Waiting for emulator to be ready..."
          adb wait-for-device
          
          timeout 120 bash -c 'until adb shell getprop sys.boot_completed | grep -q "1"; do sleep 5; echo "Waiting for boot completion..."; done'
          
          echo "Device is ready"
          adb devices
          
          # Install the APK
          find src/test/resources/apps -name "*.apk" -exec adb install -r {} \; || echo "No APK files found or installation failed"

      - name: Run tests
        run: |
          # Set Maven options to avoid compilation issues
          export MAVEN_OPTS="-Xmx2g"
          
          # Skip compilation if possible, just run the tests
          mvn -B test -Dmaven.main.skip=true -Dmaven.compiler.skip=true || mvn -B test

      - name: Debug on failure
        if: failure()
        run: |
          echo "Debug information on failure:"
          echo "----------------------------"
          echo "Appium log:"
          cat appium.log || echo "No appium.log file found"
          echo "----------------------------"
          echo "Emulator status:"
          adb devices || echo "No devices connected"
          echo "----------------------------"
          echo "Logcat output:"
          adb logcat -d || echo "No logcat available"