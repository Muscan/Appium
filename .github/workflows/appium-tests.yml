name: Appium Tests

on:
  push:
    branches: [ master, main ]
  pull_request:
    branches: [ master, main ]
  workflow_dispatch:  # Allows manual triggering

jobs:
  test:
    runs-on: macos-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # Set up Java 17 first for Android SDK setup
      - name: Set up Java 17 for Android SDK
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      # Install Android SDK with Java 17
      - name: Setup Android SDK
        uses: android-actions/setup-android@v2

      # Now switch to Java 11 for your tests
      - name: Set up Java 11 for Tests
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '11'
          cache: 'maven'

      - name: Install Appium
        run: |
          npm install -g appium
          appium driver install uiautomator2
          appium --log appium.log &

      # Use a dedicated GitHub Action for emulator setup
      - name: AVD cache
        uses: actions/cache@v3
        id: avd-cache
        with:
          path: |
            ~/.android/avd/*
            ~/.android/adb*
          key: avd-29

      - name: Create AVD and generate snapshot for caching
        if: steps.avd-cache.outputs.cache-hit != 'true'
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: 29
          force-avd-creation: true
          emulator-options: -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
          disable-animations: true
          script: echo "Generated AVD snapshot for caching."

      - name: Run tests on emulator
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: 29
          force-avd-creation: false
          emulator-options: -no-snapshot-save -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
          disable-animations: true
          script: |
            adb devices
            find . -name "*.apk" -exec adb install {} \; || echo "Failed to install APK"
            
            # Set up configuration
            mkdir -p src/test/resources/config
            cp src/test/resources/config/github-actions-config.properties src/test/resources/config/config.properties || echo "Failed to copy config file"
            
            # Run tests
            mvn clean test

      - name: Check test results directory
        if: always()
        run: |
          ls -la target || echo "Target directory not found"
          find target -name "*.html" || echo "No HTML reports found"